/* tslint:disable */
/* eslint-disable */
/**
 * Camera Store API
 * Fujifilm Camera Store API built with MedusaJS v2 - E-commerce backend with custom featured categories functionality
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductPrice } from './ProductPrice';
import {
    ProductPriceFromJSON,
    ProductPriceFromJSONTyped,
    ProductPriceToJSON,
    ProductPriceToJSONTyped,
} from './ProductPrice';

/**
 * 
 * @export
 * @interface ProductVariant
 */
export interface ProductVariant {
    /**
     * Variant ID
     * @type {string}
     * @memberof ProductVariant
     */
    id: string;
    /**
     * Variant title
     * @type {string}
     * @memberof ProductVariant
     */
    title: string;
    /**
     * Stock Keeping Unit
     * @type {string}
     * @memberof ProductVariant
     */
    sku?: string | null;
    /**
     * Variant prices
     * @type {Array<ProductPrice>}
     * @memberof ProductVariant
     */
    prices?: Array<ProductPrice> | undefined;
    /**
     * Available inventory quantity
     * @type {number}
     * @memberof ProductVariant
     */
    inventoryQuantity?: number | null;
}

/**
 * Check if a given object implements the ProductVariant interface.
 */
export function instanceOfProductVariant(value: object): value is ProductVariant {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    return true;
}

export function ProductVariantFromJSON(json: any): ProductVariant {
    return ProductVariantFromJSONTyped(json, false);
}

export function ProductVariantFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductVariant {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'title': json['title'],
        'sku': json['sku'] == null ? undefined : json['sku'],
        'prices': json['prices'] == null ? undefined : ((json['prices'] as Array<any>).map(ProductPriceFromJSON)),
        'inventoryQuantity': json['inventory_quantity'] == null ? undefined : json['inventory_quantity'],
    };
}

export function ProductVariantToJSON(json: any): ProductVariant {
    return ProductVariantToJSONTyped(json, false);
}

export function ProductVariantToJSONTyped(value?: ProductVariant | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'sku': value['sku'],
        'prices': value['prices'] == null ? undefined : ((value['prices'] as Array<any>).map(ProductPriceToJSON)),
        'inventory_quantity': value['inventoryQuantity'],
    };
}

