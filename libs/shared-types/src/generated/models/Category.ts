/* tslint:disable */
/* eslint-disable */
/**
 * Camera Store API
 * Fujifilm Camera Store API built with MedusaJS v2 - E-commerce backend with custom featured categories functionality
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Category
 */
export interface Category {
    /**
     * Category ID
     * @type {string}
     * @memberof Category
     */
    id: string;
    /**
     * Category name
     * @type {string}
     * @memberof Category
     */
    name: string;
    /**
     * Category description
     * @type {string}
     * @memberof Category
     */
    description?: string | null;
    /**
     * Category URL handle
     * @type {string}
     * @memberof Category
     */
    handle: string;
    /**
     * Whether the category is active
     * @type {boolean}
     * @memberof Category
     */
    isActive: boolean;
    /**
     * Parent category ID
     * @type {string}
     * @memberof Category
     */
    parentCategoryId?: string | null;
    /**
     * Additional metadata including featured category settings
     * @type {{ [key: string]: any; }}
     * @memberof Category
     */
    metadata?: { [key: string]: any; } | null;
}

/**
 * Check if a given object implements the Category interface.
 */
export function instanceOfCategory(value: object): value is Category {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('handle' in value) || value['handle'] === undefined) return false;
    if (!('isActive' in value) || value['isActive'] === undefined) return false;
    return true;
}

export function CategoryFromJSON(json: any): Category {
    return CategoryFromJSONTyped(json, false);
}

export function CategoryFromJSONTyped(json: any, ignoreDiscriminator: boolean): Category {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'description': json['description'] == null ? undefined : json['description'],
        'handle': json['handle'],
        'isActive': json['is_active'],
        'parentCategoryId': json['parent_category_id'] == null ? undefined : json['parent_category_id'],
        'metadata': json['metadata'] == null ? undefined : json['metadata'],
    };
}

export function CategoryToJSON(json: any): Category {
    return CategoryToJSONTyped(json, false);
}

export function CategoryToJSONTyped(value?: Category | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'description': value['description'],
        'handle': value['handle'],
        'is_active': value['isActive'],
        'parent_category_id': value['parentCategoryId'],
        'metadata': value['metadata'],
    };
}

