/* tslint:disable */
/* eslint-disable */
/**
 * Camera Store API
 * Fujifilm Camera Store API built with MedusaJS v2 - E-commerce backend with custom featured categories functionality
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CategoryFeaturedResponse,
  CategoryFeaturedStatusResponse,
  ErrorResponse,
  FeaturedCategoryRequest,
} from '../models/index';
import {
    CategoryFeaturedResponseFromJSON,
    CategoryFeaturedResponseToJSON,
    CategoryFeaturedStatusResponseFromJSON,
    CategoryFeaturedStatusResponseToJSON,
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FeaturedCategoryRequestFromJSON,
    FeaturedCategoryRequestToJSON,
} from '../models/index';

export interface GetCategoryFeaturedStatusRequest {
    categoryId: string;
}

export interface SetCategoryFeaturedRequest {
    categoryId: string;
    featuredCategoryRequest: FeaturedCategoryRequest;
}

/**
 * AdminApi - interface
 * 
 * @export
 * @interface AdminApiInterface
 */
export interface AdminApiInterface {
    /**
     * Get featured status and settings for a category
     * @summary Get category featured status
     * @param {string} categoryId Category ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    getCategoryFeaturedStatusRaw(requestParameters: GetCategoryFeaturedStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryFeaturedStatusResponse>>;

    /**
     * Get featured status and settings for a category
     * Get category featured status
     */
    getCategoryFeaturedStatus(requestParameters: GetCategoryFeaturedStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryFeaturedStatusResponse>;

    /**
     * Set a category as featured with hero banner configuration
     * @summary Set category as featured
     * @param {string} categoryId Category ID
     * @param {FeaturedCategoryRequest} featuredCategoryRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminApiInterface
     */
    setCategoryFeaturedRaw(requestParameters: SetCategoryFeaturedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryFeaturedResponse>>;

    /**
     * Set a category as featured with hero banner configuration
     * Set category as featured
     */
    setCategoryFeatured(requestParameters: SetCategoryFeaturedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryFeaturedResponse>;

}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI implements AdminApiInterface {

    /**
     * Get featured status and settings for a category
     * Get category featured status
     */
    async getCategoryFeaturedStatusRaw(requestParameters: GetCategoryFeaturedStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryFeaturedStatusResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling getCategoryFeaturedStatus().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AdminAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-publishable-api-key"] = await this.configuration.apiKey("x-publishable-api-key"); // PublishableApiKey authentication
        }


        let urlPath = `/admin/categories/{categoryId}/featured`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFeaturedStatusResponseFromJSON(jsonValue));
    }

    /**
     * Get featured status and settings for a category
     * Get category featured status
     */
    async getCategoryFeaturedStatus(requestParameters: GetCategoryFeaturedStatusRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryFeaturedStatusResponse> {
        const response = await this.getCategoryFeaturedStatusRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Set a category as featured with hero banner configuration
     * Set category as featured
     */
    async setCategoryFeaturedRaw(requestParameters: SetCategoryFeaturedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CategoryFeaturedResponse>> {
        if (requestParameters['categoryId'] == null) {
            throw new runtime.RequiredError(
                'categoryId',
                'Required parameter "categoryId" was null or undefined when calling setCategoryFeatured().'
            );
        }

        if (requestParameters['featuredCategoryRequest'] == null) {
            throw new runtime.RequiredError(
                'featuredCategoryRequest',
                'Required parameter "featuredCategoryRequest" was null or undefined when calling setCategoryFeatured().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AdminAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-publishable-api-key"] = await this.configuration.apiKey("x-publishable-api-key"); // PublishableApiKey authentication
        }


        let urlPath = `/admin/categories/{categoryId}/featured`;
        urlPath = urlPath.replace(`{${"categoryId"}}`, encodeURIComponent(String(requestParameters['categoryId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeaturedCategoryRequestToJSON(requestParameters['featuredCategoryRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CategoryFeaturedResponseFromJSON(jsonValue));
    }

    /**
     * Set a category as featured with hero banner configuration
     * Set category as featured
     */
    async setCategoryFeatured(requestParameters: SetCategoryFeaturedRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CategoryFeaturedResponse> {
        const response = await this.setCategoryFeaturedRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
