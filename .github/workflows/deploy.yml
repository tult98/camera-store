name: Deploy to Railway

on:
  push:
    branches: [main]

env:
  NX_CLOUD_DISTRIBUTED_EXECUTION: false

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      affected-backend: ${{ steps.affected.outputs.backend }}
      affected-frontend: ${{ steps.affected.outputs.frontend }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Yarn Cache
        uses: ./.github/actions/setup-yarn-cache

      - name: Check affected projects
        id: affected
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_SHA="${{ github.event.pull_request.base.sha }}"
          else
            BASE_SHA="HEAD~1"
          fi

          AFFECTED_APPS=$(npx nx show projects --affected --base=$BASE_SHA --projects=backend,frontend)

          echo "Affected apps: $AFFECTED_APPS"

          if echo "$AFFECTED_APPS" | grep -q "backend"; then
            echo "backend=true" >> $GITHUB_OUTPUT
          else
            echo "backend=false" >> $GITHUB_OUTPUT
          fi

          if echo "$AFFECTED_APPS" | grep -q "frontend"; then
            echo "frontend=true" >> $GITHUB_OUTPUT
          else
            echo "frontend=false" >> $GITHUB_OUTPUT
          fi

  quality-checks:
    runs-on: ubuntu-latest
    needs: setup
    # if: needs.setup.outputs.affected-backend == 'true' || needs.setup.outputs.affected-frontend == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Yarn Cache
        uses: ./.github/actions/setup-yarn-cache

      - name: Run linting
        run: yarn nx affected -t lint
        env:
          NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY: pk_camera_store_dev_static_key_123456789

      - name: Run type checking
        run: yarn nx affected -t type-check
        env:
          NEXT_PUBLIC_MEDUSA_PUBLISHABLE_KEY: pk_camera_store_dev_static_key_123456789

  deploy-backend:
    runs-on: ubuntu-latest
    needs: [setup, quality-checks]
    # if: needs.setup.outputs.affected-backend == 'true' && always() && needs.quality-checks.result == 'success'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Yarn Cache
        uses: ./.github/actions/setup-yarn-cache

      - name: Build backend
        run: yarn nx build backend
        env:
          DATABASE_URL: ${{ secrets.DATABASE_URL }}

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        with:
          service: ${{ vars.RAILWAY_BACKEND_SERVICE_NAME }}

  deploy-frontend:
    runs-on: ubuntu-latest
    needs: [setup, quality-checks]
    # if: needs.setup.outputs.affected-frontend == 'true' && always() && needs.quality-checks.result == 'success'
    environment: staging
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Yarn Cache
        uses: ./.github/actions/setup-yarn-cache

      - name: Build frontend
        run: yarn nx build frontend

      - name: Deploy to Railway
        uses: bervProject/railway-deploy@main
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        with:
          service: ${{ vars.RAILWAY_FRONTEND_SERVICE_NAME }}

  deploy-status:
    runs-on: ubuntu-latest
    needs: [setup, deploy-backend, deploy-frontend]
    if: always()
    steps:
      - name: Deployment Status
        run: |
          echo "üöÄ Deployment Summary:"
          echo "Backend affected: ${{ needs.setup.outputs.affected-backend }}"
          echo "Frontend affected: ${{ needs.setup.outputs.affected-frontend }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Environment: staging"

          if [ "${{ needs.deploy-backend.result }}" = "success" ]; then
            echo "‚úÖ Backend deployment successful"
          elif [ "${{ needs.setup.outputs.affected-backend }}" = "true" ]; then
            echo "‚ùå Backend deployment failed"
          else
            echo "‚è≠Ô∏è Backend deployment skipped (not affected)"
          fi

          if [ "${{ needs.deploy-frontend.result }}" = "success" ]; then
            echo "‚úÖ Frontend deployment successful"
          elif [ "${{ needs.setup.outputs.affected-frontend }}" = "true" ]; then
            echo "‚ùå Frontend deployment failed"
          else
            echo "‚è≠Ô∏è Frontend deployment skipped (not affected)"
          fi
