name: Quality Checks

on:
  workflow_call:
    inputs:
      affected-projects:
        required: false
        type: string
        description: 'Comma-separated list of affected projects'
      run-all:
        required: false
        type: boolean
        default: false
        description: 'Run checks on all projects'

jobs:
  quality-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run ESLint
        run: |
          echo "üîç Running ESLint..."
          if [ "${{ inputs.run-all }}" = "true" ]; then
            yarn lint
          elif [ -n "${{ inputs.affected-projects }}" ]; then
            IFS=',' read -ra PROJECTS <<< "${{ inputs.affected-projects }}"
            for project in "${PROJECTS[@]}"; do
              echo "Linting $project..."
              nx run "$project:lint" || true
            done
          else
            nx affected --target=lint
          fi

      - name: Run TypeScript checking
        run: |
          echo "üîç Running TypeScript checks..."
          if [ "${{ inputs.run-all }}" = "true" ]; then
            yarn type-check
          elif [ -n "${{ inputs.affected-projects }}" ]; then
            IFS=',' read -ra PROJECTS <<< "${{ inputs.affected-projects }}"
            for project in "${PROJECTS[@]}"; do
              echo "Type-checking $project..."
              nx run "$project:type-check" || true
            done
          else
            nx affected --target=type-check
          fi

      - name: Run unit tests
        run: |
          echo "üß™ Running unit tests..."
          if [ "${{ inputs.run-all }}" = "true" ]; then
            yarn test
          elif [ -n "${{ inputs.affected-projects }}" ]; then
            IFS=',' read -ra PROJECTS <<< "${{ inputs.affected-projects }}"
            for project in "${PROJECTS[@]}"; do
              echo "Testing $project..."
              nx run "$project:test" --watchAll=false --passWithNoTests || true
            done
          else
            nx affected --target=test --watchAll=false --passWithNoTests
          fi

      - name: Build affected projects
        run: |
          echo "üèóÔ∏è Building projects..."
          if [ "${{ inputs.run-all }}" = "true" ]; then
            yarn build
          elif [ -n "${{ inputs.affected-projects }}" ]; then
            IFS=',' read -ra PROJECTS <<< "${{ inputs.affected-projects }}"
            for project in "${PROJECTS[@]}"; do
              echo "Building $project..."
              nx run "$project:build"
            done
          else
            nx affected --target=build
          fi

      - name: Generate build artifacts info
        run: |
          echo "üìä Build artifacts summary:"
          echo "Backend build output:"
          ls -la apps/backend/.medusa/ 2>/dev/null || echo "No backend build output found"
          echo ""
          echo "Frontend build output:"
          ls -la apps/frontend/.next/ 2>/dev/null || echo "No frontend build output found"

  security-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Enable Corepack
        run: corepack enable

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.yarn/cache
            node_modules
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install dependencies
        run: yarn install --frozen-lockfile

      - name: Run security audit
        run: |
          echo "üîí Running security audit..."
          yarn audit --level moderate || echo "Security audit completed with warnings"

      - name: Check for secrets
        run: |
          echo "üîç Checking for potential secrets..."
          
          # Check for common secret patterns
          if grep -r -E "(password|secret|key|token).*=.*['\"][^'\"]{8,}['\"]" apps/ --exclude-dir=node_modules || true; then
            echo "‚ö†Ô∏è Found potential hardcoded secrets (review manually)"
          else
            echo "‚úÖ No obvious hardcoded secrets found"
          fi
          
          # Check for .env files in wrong places
          find apps/ -name ".env" -not -path "*/node_modules/*" | while read file; do
            echo "‚ö†Ô∏è Found .env file: $file (ensure it's not committed with secrets)"
          done

  dependency-checks:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'yarn'

      - name: Check for dependency updates
        run: |
          echo "üì¶ Checking for outdated dependencies..."
          yarn outdated || echo "Dependency check completed"

      - name: Validate package.json
        run: |
          echo "üìã Validating package.json files..."
          
          # Check for consistent versions across workspace
          node -e "
            const fs = require('fs');
            const rootPkg = JSON.parse(fs.readFileSync('package.json', 'utf8'));
            console.log('Root package validation: ‚úÖ');
          " || echo "‚ùå Root package.json validation failed"