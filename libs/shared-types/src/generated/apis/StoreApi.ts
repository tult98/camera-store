/* tslint:disable */
/* eslint-disable */
/**
 * Camera Store API
 * Fujifilm Camera Store API built with MedusaJS v2 - E-commerce backend with custom featured categories functionality
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ErrorResponse,
  FeaturedCategoriesResponse,
} from '../models/index';
import {
    ErrorResponseFromJSON,
    ErrorResponseToJSON,
    FeaturedCategoriesResponseFromJSON,
    FeaturedCategoriesResponseToJSON,
} from '../models/index';

export interface GetFeaturedCategoriesRequest {
    xPublishableApiKey: string;
}

/**
 * StoreApi - interface
 * 
 * @export
 * @interface StoreApiInterface
 */
export interface StoreApiInterface {
    /**
     * Fetches all active featured categories with their products for homepage display
     * @summary Get featured categories
     * @param {string} xPublishableApiKey Publishable API key for authentication
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StoreApiInterface
     */
    getFeaturedCategoriesRaw(requestParameters: GetFeaturedCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeaturedCategoriesResponse>>;

    /**
     * Fetches all active featured categories with their products for homepage display
     * Get featured categories
     */
    getFeaturedCategories(requestParameters: GetFeaturedCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeaturedCategoriesResponse>;

}

/**
 * 
 */
export class StoreApi extends runtime.BaseAPI implements StoreApiInterface {

    /**
     * Fetches all active featured categories with their products for homepage display
     * Get featured categories
     */
    async getFeaturedCategoriesRaw(requestParameters: GetFeaturedCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeaturedCategoriesResponse>> {
        if (requestParameters['xPublishableApiKey'] == null) {
            throw new runtime.RequiredError(
                'xPublishableApiKey',
                'Required parameter "xPublishableApiKey" was null or undefined when calling getFeaturedCategories().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xPublishableApiKey'] != null) {
            headerParameters['x-publishable-api-key'] = String(requestParameters['xPublishableApiKey']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("AdminAuth", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.apiKey) {
            headerParameters["x-publishable-api-key"] = await this.configuration.apiKey("x-publishable-api-key"); // PublishableApiKey authentication
        }


        let urlPath = `/store/featured-categories`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeaturedCategoriesResponseFromJSON(jsonValue));
    }

    /**
     * Fetches all active featured categories with their products for homepage display
     * Get featured categories
     */
    async getFeaturedCategories(requestParameters: GetFeaturedCategoriesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeaturedCategoriesResponse> {
        const response = await this.getFeaturedCategoriesRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
